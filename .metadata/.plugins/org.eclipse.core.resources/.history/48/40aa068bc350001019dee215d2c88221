/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "gpio.h"
#include "tim.h"
#include "CLCD.h"
#include "usart.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
volatile uint32_t time = 0;
uint8_t str[20];
/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = { .name = "defaultTask",
		.stack_size = 128 * 4, .priority = (osPriority_t) osPriorityLow, };
/* Definitions for TimeTask */
osThreadId_t TimeTaskHandle;
const osThreadAttr_t TimeTask_attributes = { .name = "TimeTask", .stack_size =
		128 * 4, .priority = (osPriority_t) osPriorityAboveNormal, };
/* Definitions for LEDTask */
osThreadId_t LEDTaskHandle;
const osThreadAttr_t LEDTask_attributes = { .name = "LEDTask", .stack_size = 128
		* 4, .priority = (osPriority_t) osPriorityBelowNormal, };
/* Definitions for LCDTask */
osThreadId_t LCDTaskHandle;
const osThreadAttr_t LCDTask_attributes = { .name = "LCDTask", .stack_size = 128
		* 4, .priority = (osPriority_t) osPriorityNormal, };
/* Definitions for UartTask */
osThreadId_t UartTaskHandle;
const osThreadAttr_t UartTask_attributes = { .name = "UartTask", .stack_size =
		128 * 4, .priority = (osPriority_t) osPriorityBelowNormal, };
/* Definitions for timeSem */
osSemaphoreId_t timeSemHandle;
const osSemaphoreAttr_t timeSem_attributes = { .name = "timeSem" };
/* Definitions for eventFlags */
osEventFlagsId_t eventFlagsHandle;
const osEventFlagsAttr_t eventFlags_attributes = { .name = "eventFlags" };

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);
void StartTime(void *argument);
void StartLED(void *argument);
void StartLCD(void *argument);
void StartUart(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of timeSem */
	timeSemHandle = osSemaphoreNew(1, 0, &timeSem_attributes);

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
			&defaultTask_attributes);

	/* creation of TimeTask */
	TimeTaskHandle = osThreadNew(StartTime, NULL, &TimeTask_attributes);

	/* creation of LEDTask */
	LEDTaskHandle = osThreadNew(StartLED, NULL, &LEDTask_attributes);

	/* creation of LCDTask */
	LCDTaskHandle = osThreadNew(StartLCD, NULL, &LCDTask_attributes);

	/* creation of UartTask */
	UartTaskHandle = osThreadNew(StartUart, NULL, &UartTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Create the event(s) */
	/* creation of eventFlags */
	eventFlagsHandle = osEventFlagsNew(&eventFlags_attributes);

	/* USER CODE BEGIN RTOS_EVENTS */
#define EVENT_TIME_BIT  (1 << 0)
#define EVENT_LED_BIT   (1 << 1)
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
	}
	/* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_StartTime */
/**
 * @brief Function implementing the TimeTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTime */
void StartTime(void *argument) {
	/* USER CODE BEGIN StartTime */
	HAL_TIM_Base_Start_IT(&htim7);

	/* Infinite loop */
	for (;;) {
		// 세마포어 대기 (무한 대기)
//		if (osSemaphoreAcquire(timeSemHandle, osWaitForever) == osOK) {
//			time++;
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
//		}

		uint32_t flags = osEventFlagsWait(eventHandle, EVENT_TIME_BIT,
		osFlagsWaitAny, osWaitForever);
		if (flags & EVENT_TIME_BIT) {
			time++;
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
		}
	}
	/* USER CODE END StartTime */
}

/* USER CODE BEGIN Header_StartLED */
/**
 * @brief Function implementing the LEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLED */
void StartLED(void *argument) {
	/* USER CODE BEGIN StartLED */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
	/* Infinite loop */
	for (;;) {
//		if (flag_led) {
//			flag_led = 0;
//			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
//		}
//		osDelay(10);

		uint32_t flags = osEventFlagsWait(eventHandle, EVENT_LED_BIT,
		osFlagsWaitAny, osWaitForever);
		if (flags & EVENT_LED_BIT) {
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		}
	}
	/* USER CODE END StartLED */
}

/* USER CODE BEGIN Header_StartLCD */
/**
 * @brief Function implementing the LCDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCD */
void StartLCD(void *argument) {
	/* USER CODE BEGIN StartLCD */
	CLCD_GPIO_Init();
	CLCD_Init();
	/* Infinite loop */
	for (;;) {
		// TODO: 시간 표시 코드 추가 (LCD_Write 함수 등)
		sprintf(str, "%d", time);
		CLCD_Puts(0, 0, str);
		osDelay(500);
	}
	/* USER CODE END StartLCD */
}

/* USER CODE BEGIN Header_StartUart */
/**
 * @brief Function implementing the UartTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUart */
void StartUart(void *argument) {
	/* USER CODE BEGIN StartUart */

// TODO: UART초기화
	/* Infinite loop */
	for (;;) {
		// TODO: 시간 전송
		printf("%d\n", time);
		osDelay(1000);
	}
	/* USER CODE END StartUart */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

