/* USER CODE BEGIN Header */
/**
 ******************************************************************************
 * File Name          : freertos.c
 * Description        : Code for freertos applications
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2025 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "FreeRTOS.h"
#include "task.h"
#include "main.h"
#include "cmsis_os.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "gpio.h"
#include "tim.h"
#include "CLCD.h"
#include "VS1003.h"
#include "MP3Sample.h"
#include "usart.h"
#include "events.h"
#include <stdio.h>
#include "fatfs.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MP3_BUF_SIZE 4096
uint8_t mp3_buf[MP3_BUF_SIZE];
volatile uint32_t mp3_buf_len = 0;
volatile uint32_t mp3_buf_index = 0;

#define MP3_CHUNK_SIZE 32

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
/* USER CODE BEGIN Variables */
volatile uint32_t time_1sec = 0;
char str[20];
/* USER CODE END Variables */
/* Definitions for defaultTask */
osThreadId_t defaultTaskHandle;
const osThreadAttr_t defaultTask_attributes = { .name = "defaultTask",
		.stack_size = 128 * 4, .priority = (osPriority_t) osPriorityLow, };
/* Definitions for TimeTask */
osThreadId_t TimeTaskHandle;
const osThreadAttr_t TimeTask_attributes = { .name = "TimeTask", .stack_size =
		128 * 4, .priority = (osPriority_t) osPriorityAboveNormal, };
/* Definitions for LEDTask */
osThreadId_t LEDTaskHandle;
const osThreadAttr_t LEDTask_attributes = { .name = "LEDTask", .stack_size = 128
		* 4, .priority = (osPriority_t) osPriorityBelowNormal, };
/* Definitions for LCDTask */
osThreadId_t LCDTaskHandle;
const osThreadAttr_t LCDTask_attributes = { .name = "LCDTask", .stack_size = 128
		* 4, .priority = (osPriority_t) osPriorityNormal, };
/* Definitions for UartTask */
osThreadId_t UartTaskHandle;
const osThreadAttr_t UartTask_attributes = { .name = "UartTask", .stack_size =
		128 * 4, .priority = (osPriority_t) osPriorityBelowNormal, };
/* Definitions for VS1003Task */
osThreadId_t VS1003TaskHandle;
const osThreadAttr_t VS1003Task_attributes = { .name = "VS1003Task",
		.stack_size = 128 * 4, .priority = (osPriority_t) osPriorityNormal, };
/* Definitions for FATFSTask */
osThreadId_t FATFSTaskHandle;
const osThreadAttr_t FATFSTask_attributes = { .name = "FATFSTask", .stack_size =
		1024 * 4, .priority = (osPriority_t) osPriorityBelowNormal, };
/* Definitions for timeMutex */
osMutexId_t timeMutexHandle;
const osMutexAttr_t timeMutex_attributes = { .name = "timeMutex" };
/* Definitions for timeSem */
osSemaphoreId_t timeSemHandle;
const osSemaphoreAttr_t timeSem_attributes = { .name = "timeSem" };
/* Definitions for eventFlags */
osEventFlagsId_t eventFlagsHandle;
const osEventFlagsAttr_t eventFlags_attributes = { .name = "eventFlags" };

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN FunctionPrototypes */

/* USER CODE END FunctionPrototypes */

void StartDefaultTask(void *argument);
void StartTime(void *argument);
void StartLED(void *argument);
void StartLCD(void *argument);
void StartUart(void *argument);
void StartVS1003(void *argument);
void StartFATFS(void *argument);

void MX_FREERTOS_Init(void); /* (MISRA C 2004 rule 8.1) */

/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */
	/* Create the mutex(es) */
	/* creation of timeMutex */
	timeMutexHandle = osMutexNew(&timeMutex_attributes);

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	/* USER CODE END RTOS_MUTEX */

	/* Create the semaphores(s) */
	/* creation of timeSem */
	timeSemHandle = osSemaphoreNew(1, 0, &timeSem_attributes);

	/* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	/* USER CODE END RTOS_SEMAPHORES */

	/* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
			&defaultTask_attributes);

	/* creation of TimeTask */
	TimeTaskHandle = osThreadNew(StartTime, NULL, &TimeTask_attributes);

	/* creation of LEDTask */
	LEDTaskHandle = osThreadNew(StartLED, NULL, &LEDTask_attributes);

	/* creation of LCDTask */
	LCDTaskHandle = osThreadNew(StartLCD, NULL, &LCDTask_attributes);

	/* creation of UartTask */
	UartTaskHandle = osThreadNew(StartUart, NULL, &UartTask_attributes);

	/* creation of VS1003Task */
	VS1003TaskHandle = osThreadNew(StartVS1003, NULL, &VS1003Task_attributes);

	/* creation of FATFSTask */
	FATFSTaskHandle = osThreadNew(StartFATFS, NULL, &FATFSTask_attributes);

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of eventFlags */
	eventFlagsHandle = osEventFlagsNew(&eventFlags_attributes);

	/* USER CODE BEGIN RTOS_EVENTS */

	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

}

/* USER CODE BEGIN Header_StartDefaultTask */
/**
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
	/* USER CODE BEGIN StartDefaultTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
	}
	/* USER CODE END StartDefaultTask */
}

/* USER CODE BEGIN Header_StartTime */
/**
 * @brief Function implementing the TimeTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartTime */
void StartTime(void *argument) {
	/* USER CODE BEGIN StartTime */
	HAL_TIM_Base_Start_IT(&htim7);

	/* Infinite loop */
	for (;;) {
		// 세마포어 대기 (무한 대기)
//		if (osSemaphoreAcquire(timeSemHandle, osWaitForever) == osOK) {
//			time_1sec++;
//			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
//		}

		uint32_t flags = osEventFlagsWait(eventFlagsHandle, EVENT_TIME_BIT,
		osFlagsWaitAny, osWaitForever);
		if (flags & EVENT_TIME_BIT) {
			osMutexAcquire(timeMutexHandle, osWaitForever);
			time_1sec++;
			osMutexRelease(timeMutexHandle);
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
		}
	}
	/* USER CODE END StartTime */
}

/* USER CODE BEGIN Header_StartLED */
/**
 * @brief Function implementing the LEDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLED */
void StartLED(void *argument) {
	/* USER CODE BEGIN StartLED */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, SET);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, SET);
	/* Infinite loop */
	for (;;) {
		uint32_t flags = osEventFlagsWait(eventFlagsHandle, EVENT_LED_BIT,
		osFlagsWaitAny, osWaitForever);
		if (flags & EVENT_LED_BIT) {
			HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
		}
	}
	/* USER CODE END StartLED */
}

/* USER CODE BEGIN Header_StartLCD */
/**
 * @brief Function implementing the LCDTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCD */
void StartLCD(void *argument) {
	/* USER CODE BEGIN StartLCD */

	/* Infinite loop */
	for (;;) {
		uint32_t flags = osEventFlagsWait(eventFlagsHandle, EVENT_LCD_BIT,
		osFlagsWaitAny, osWaitForever);
		if (flags & EVENT_LCD_BIT) {
			uint32_t local_time;

			osMutexAcquire(timeMutexHandle, osWaitForever);
			local_time = time_1sec;
			osMutexRelease(timeMutexHandle);

			sprintf(str, "%lu", local_time);
			CLCD_Puts(0, 0, (unsigned char*) str);
		}
	}
	/* USER CODE END StartLCD */
}

/* USER CODE BEGIN Header_StartUart */
/**
 * @brief Function implementing the UartTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartUart */
void StartUart(void *argument) {
	/* USER CODE BEGIN StartUart */
	/* Infinite loop */
	for (;;) {
		// TODO: 시간 전송
		uint32_t flags = osEventFlagsWait(eventFlagsHandle, EVENT_UART_BIT,
		osFlagsWaitAny, osWaitForever);
		if (flags & EVENT_UART_BIT) {
			uint32_t local_time;

			osMutexAcquire(timeMutexHandle, osWaitForever);
			local_time = time_1sec;
			osMutexRelease(timeMutexHandle);

			printf("%lu\n", local_time);
		}
	}
	/* USER CODE END StartUart */
}

/* USER CODE BEGIN Header_StartVS1003 */
/**
 * @brief Function implementing the VS1003Task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartVS1003 */
void StartVS1003(void *argument) {
	/* USER CODE BEGIN StartVS1003 */
	VS1003_Init();
	VS1003_SoftReset();
	VS1003_SetVol();
	int i = 0;

	for (;;) {
		// 태스크 알림으로 대기 (무한대기)
		ulTaskNotifyTake(pdTRUE, portMAX_DELAY);

//		// DREQ 핀이 high이고, 전송할 데이터가 있으면 전송
//		while (MP3_DREQ == 1 && sizeof(MP3_DATA) > i) {
//			VS1003_WriteData(&MP3_DATA[i]);
//			i += 32;
//		}

		while (1) {
			if (mp3_buf_len - mp3_buf_index < MP3_CHUNK_SIZE)
				break; // 데이터가 부족하면 대기

			if (MP3_DREQ == 1) {
				VS1003_WriteData(&mp3_buf[mp3_buf_index]);
				mp3_buf_index += MP3_CHUNK_SIZE;
			} else {
				break; // DREQ가 LOW면 대기
			}
		}
	}
	/* USER CODE END StartVS1003 */
}

/* USER CODE BEGIN Header_StartFATFS */
/**
 * @brief Function implementing the myTask07 thread.
 * @param argument: Not used
 * @retval None
 */
void StartFATFS(void *argument) {
	osDelay(2000);  // 시스템 안정화 시간

	uint32_t bw, br;
	char str2[20];

	// SD 카드 마운트
	if ((retSD = f_mount(&SDFatFS, &SDPath[0], 1)) == FR_OK) {
		sprintf(str2, "f_mount OK %d", retSD);
		CLCD_Puts(0, 1, (unsigned char*) str2);
	} else {
		sprintf(str2, "f_mount failed %d", retSD);
		CLCD_Puts(0, 1, (unsigned char*) str2);
	}

	const char *filename = "0:/1.mp3";

	if ((retSD = f_open(&SDFile, filename, FA_READ)) == FR_OK) {
		CLCD_Clear();
		CLCD_Puts(0, 1, (unsigned char*) filename);
	} else {
		CLCD_Clear();
		sprintf(str2, "open error %d", retSD);
		CLCD_Puts(0, 1, (unsigned char*) str2);
		vTaskDelete(NULL);
	}

	// 초기 버퍼 비움
	mp3_buf_len = 0;
	mp3_buf_index = 0;

	for (;;) {
		// 버퍼에 읽을 데이터가 충분하지 않으면 읽기
		if (mp3_buf_len - mp3_buf_index < 512) {
			UINT br;
			// 버퍼를 앞으로 당김: 남은 데이터가 있다면 앞으로 복사
			if (mp3_buf_index > 0 && mp3_buf_len > mp3_buf_index) {
				memmove(mp3_buf, &mp3_buf[mp3_buf_index],
						mp3_buf_len - mp3_buf_index);
				mp3_buf_len = mp3_buf_len - mp3_buf_index;
				mp3_buf_index = 0;
			} else if (mp3_buf_index >= mp3_buf_len) {
				mp3_buf_len = 0;
				mp3_buf_index = 0;
			}

			retSD = f_read(&SDFile, &mp3_buf[mp3_buf_len],
					MP3_BUF_SIZE - mp3_buf_len, &br);
			if (retSD != FR_OK || br == 0) {
				// 파일 끝 또는 오류 시 처음으로 되돌림
				f_lseek(&SDFile, 0);
				mp3_buf_len = 0;
				mp3_buf_index = 0;
				continue;
			}
			mp3_buf_len += br;

			// VS1003Task에 알림 보내서 데이터 전송 재개
			xTaskNotifyGive(VS1003TaskHandle);
		}
		osDelay(10);
	}

}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

/* USER CODE END Application */

