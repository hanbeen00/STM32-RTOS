#include "lwip/ip6_addr.h"
#include "lwip/pbuf.h"
#include "lwip/udp.h"
#include "lwip/ip_addr.h"
#include "lwip/inet.h"
#include "lwip.h"
#include <string.h>
#include <stdio.h>
#include <time.h>
#include "events.h"
#include "cmsis_os.h"

extern osMessageQueueId_t uartQueueHandle;

#define NTP_PORT 123
#define NTP_PACKET_SIZE 48
#define NTP_UNIX_OFFSET 2208988800UL

static struct udp_pcb *ntp_pcb;
static ip_addr_t ntp_server_ip;
static uint8_t ntp_packet[NTP_PACKET_SIZE];

__IO uint32_t ntp_time_unix = 0;
__IO uint8_t ntp_time_updated = 0;

void udp_ntp_client_init(void);

// NTP 수신 콜백
void udp_ntp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
	if (p == NULL) {
		return;
	}

	if (p->len >= NTP_PACKET_SIZE) {
		uint32_t seconds;
		memcpy(&seconds, (uint8_t*) p->payload + 40, 4);
		seconds = ntohl(seconds);

		if (seconds > NTP_UNIX_OFFSET) {
			ntp_time_unix = seconds - NTP_UNIX_OFFSET;
			ntp_time_updated = 1;
		}
	}
	pbuf_free(p);
}

// 예시: 출력 대신 상태 변수만 세팅
void udp_ntp_send(void) {
	if (!netif_is_up(&gnetif) || !netif_is_link_up(&gnetif)) {
		// 네트워크 준비 안됨
		return;
	}
	if (ip4_addr_isany_val(*netif_ip4_addr(&gnetif))) {
		// IP 주소 없음
		return;
	}
	if (ntp_pcb == NULL) {
		udp_ntp_client_init();
		return;
	}

	struct pbuf *p;
	memset(ntp_packet, 0, sizeof(ntp_packet));
	ntp_packet[0] = 0x1B;

	p = pbuf_alloc(PBUF_TRANSPORT, NTP_PACKET_SIZE, PBUF_RAM);
	if (p != NULL) {
		pbuf_take(p, ntp_packet, NTP_PACKET_SIZE);
		err_t result = udp_send(ntp_pcb, p);
		// 출력 대신 상태 플래그 갱신 or 큐에 메시지 삽입 등으로 처리
		pbuf_free(p);
	}
}

// NTP 초기화 함수
void udp_ntp_client_init(void) {
	char logBuf[128];
	// 네트워크 상태 확인
	if (!netif_is_up(&gnetif)) {
		snprintf(logBuf, sizeof(logBuf), "[NTP] Network interface not up\n");
		osMessageQueuePut(uartQueueHandle, logBuf, 0, 0);
		return;
	}

	// 기존 PCB 정리
	if (ntp_pcb != NULL) {
		udp_disconnect(ntp_pcb);
		udp_remove(ntp_pcb);
		ntp_pcb = NULL;
	}

	ntp_pcb = udp_new();
	if (ntp_pcb == NULL) {
		snprintf(logBuf, sizeof(logBuf), "[NTP] Failed to create UDP PCB\n");
		osMessageQueuePut(uartQueueHandle, logBuf, 0, 0);
		return;
	}

	// 로컬 포트 바인딩
	err_t bind_result = udp_bind(ntp_pcb, IP_ADDR_ANY, 0);
	if (bind_result != ERR_OK) {
		snprintf(logBuf, sizeof(logBuf), "[NTP] Failed to bind: %d",
				bind_result);
		osMessageQueuePut(uartQueueHandle, logBuf, 0, 0);
		udp_remove(ntp_pcb);
		ntp_pcb = NULL;
		return;
	}

	// NTP 서버 IP 설정 (Google NTP 서버)
	IP4_ADDR(&ntp_server_ip, 216, 239, 35, 0);

	// 서버 연결
	err_t connect_result = udp_connect(ntp_pcb, &ntp_server_ip, NTP_PORT);
	if (connect_result != ERR_OK) {
		snprintf(logBuf, sizeof(logBuf), "[NTP] Failed to connect: %d\n",
				connect_result);
		osMessageQueuePut(uartQueueHandle, logBuf, 0, 0);
		udp_remove(ntp_pcb);
		ntp_pcb = NULL;
		return;
	}

	// 수신 콜백 등록
	udp_recv(ntp_pcb, udp_ntp_receive_callback, NULL);

	snprintf(logBuf, sizeof(logBuf), "[NTP] Client initialized successfully\n");
			osMessageQueuePut(uartQueueHandle, logBuf, 0, 0);

	// 초기 요청 전송
	udp_ntp_send();
}

