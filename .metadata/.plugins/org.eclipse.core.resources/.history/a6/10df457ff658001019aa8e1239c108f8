#include "lwip/ip6_addr.h"
#include "lwip/pbuf.h"
#include "lwip/udp.h"
#include "lwip/ip_addr.h"
#include "lwip/inet.h"
#include "lwip.h"
#include <string.h>
#include <stdio.h>
#include <time.h>
#include "events.h"

#define NTP_PORT 123
#define NTP_PACKET_SIZE 48
#define NTP_UNIX_OFFSET 2208988800UL

static struct udp_pcb *ntp_pcb;
static ip_addr_t ntp_server_ip;
static uint8_t ntp_packet[NTP_PACKET_SIZE];

__IO uint32_t ntp_time_unix = 0;
__IO uint8_t ntp_time_updated = 0;

void udp_ntp_client_init(void);

// NTP 수신 콜백
void udp_ntp_receive_callback(void *arg, struct udp_pcb *pcb, struct pbuf *p,
		const ip_addr_t *addr, u16_t port) {
	if (p == NULL) {
		printf("[NTP] Received NULL packet\r\n");
		return;
	}

	if (p->len >= NTP_PACKET_SIZE) {
		uint32_t seconds;

		memcpy(&seconds, (uint8_t*) p->payload + 40, 4);
		seconds = ntohl(seconds);

		if (seconds > NTP_UNIX_OFFSET) {
			ntp_time_unix = seconds - NTP_UNIX_OFFSET;
			ntp_time_updated = 1;

			time_t rawtime = (time_t) ntp_time_unix;
			struct tm *timeinfo = gmtime(&rawtime);

//            printf("[NTP] Time updated: %04d-%02d-%02d %02d:%02d:%02d (UTC)\r\n",
//                   timeinfo->tm_year + 1900,
//                   timeinfo->tm_mon + 1,
//                   timeinfo->tm_mday,
//                   timeinfo->tm_hour,
//                   timeinfo->tm_min,
//                   timeinfo->tm_sec);
			printf("[NTP] OK");
		} else {
			printf("[NTP] Invalid timestamp received: %lu\r\n", seconds);
		}
	} else {
		printf("[NTP] Packet too short: %d bytes\r\n", p->len);
	}
	pbuf_free(p);
}

// NTP 요청 전송 함수
void udp_ntp_send(void) {
	// 네트워크 상태 확인
	if (!netif_is_up(&gnetif) || !netif_is_link_up(&gnetif)) {
		printf("[NTP] Network not ready\r\n");
		return;
	}

	// IP 주소 할당 확인
	if (ip4_addr_isany_val(*netif_ip4_addr(&gnetif))) {
		printf("[NTP] No IP address assigned\r\n");
		return;
	}

	if (ntp_pcb == NULL) {
		printf("[NTP] PCB is NULL. Reinitializing...\r\n");
		udp_ntp_client_init();
		return;
	}

	struct pbuf *p;

	// NTP 패킷 구성
	memset(ntp_packet, 0, sizeof(ntp_packet));
	ntp_packet[0] = 0x1B; // LI=0, VN=3, Mode=3 (Client)

	p = pbuf_alloc(PBUF_TRANSPORT, NTP_PACKET_SIZE, PBUF_RAM);
	if (p != NULL) {
		pbuf_take(p, ntp_packet, NTP_PACKET_SIZE);
		err_t result = udp_send(ntp_pcb, p);
		if (result != ERR_OK) {
			printf("[NTP] Send failed: %d\r\n", result);
		} else {
			printf("[NTP] Request sent to %s\r\n",
					ip4addr_ntoa(&ntp_server_ip));
		}
		pbuf_free(p);
	} else {
		printf("[NTP] Failed to allocate pbuf\r\n");
	}
}

// NTP 초기화 함수
void udp_ntp_client_init(void) {
	// 네트워크 상태 확인
	if (!netif_is_up(&gnetif)) {
		printf("[NTP] Network interface not up\r\n");
		return;
	}

	// 기존 PCB 정리
	if (ntp_pcb != NULL) {
		udp_disconnect(ntp_pcb);
		udp_remove(ntp_pcb);
		ntp_pcb = NULL;
	}

	ntp_pcb = udp_new();
	if (ntp_pcb == NULL) {
		printf("[NTP] Failed to create UDP PCB\r\n");
		return;
	}

	// 로컬 포트 바인딩
	err_t bind_result = udp_bind(ntp_pcb, IP_ADDR_ANY, 0);
	if (bind_result != ERR_OK) {
		printf("[NTP] Failed to bind: %d\r\n", bind_result);
		udp_remove(ntp_pcb);
		ntp_pcb = NULL;
		return;
	}

	// NTP 서버 IP 설정 (Google NTP 서버)
	IP4_ADDR(&ntp_server_ip, 216, 239, 35, 0);

	// 서버 연결
	err_t connect_result = udp_connect(ntp_pcb, &ntp_server_ip, NTP_PORT);
	if (connect_result != ERR_OK) {
		printf("[NTP] Failed to connect: %d\r\n", connect_result);
		udp_remove(ntp_pcb);
		ntp_pcb = NULL;
		return;
	}

	// 수신 콜백 등록
	udp_recv(ntp_pcb, udp_ntp_receive_callback, NULL);

	printf("[NTP] Client initialized successfully\r\n");

	// 초기 요청 전송
	udp_ntp_send();
}

// NTP 정리 함수
void udp_ntp_client_deinit(void) {
	if (ntp_pcb != NULL) {
		udp_disconnect(ntp_pcb);
		udp_remove(ntp_pcb);
		ntp_pcb = NULL;
	}
	ntp_time_updated = 0;
	printf("[NTP] Client deinitialized\r\n");
}

// 현재 시간 가져오기 함수
uint32_t ntp_get_current_time(void) {
	if (!ntp_time_updated) {
		return 0;
	}
	return ntp_time_unix;
}

// NTP 시간 유효성 확인
uint8_t ntp_is_time_valid(void) {
	return ntp_time_updated;
}
